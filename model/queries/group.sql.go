// Code generated by sqlc. DO NOT EDIT.
// source: group.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/kak-tus/irma_bot/model/queries_types"
)

const createOrUpdateGroup = `-- name: CreateOrUpdateGroup :exec
INSERT INTO groups
  (id, greeting, questions, ban_url, ban_question, ban_timeout)
  VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (id) DO UPDATE SET
  (greeting, questions, ban_url, ban_question, ban_timeout) =
  ROW(EXCLUDED.greeting, EXCLUDED.questions, EXCLUDED.ban_url, EXCLUDED.ban_question, EXCLUDED.ban_timeout)
`

type CreateOrUpdateGroupParams struct {
	ID          int64
	Greeting    sql.NullString
	Questions   queries_types.QuestionsDB
	BanUrl      sql.NullBool
	BanQuestion sql.NullBool
	BanTimeout  sql.NullInt32
}

func (q *Queries) CreateOrUpdateGroup(ctx context.Context, arg CreateOrUpdateGroupParams) error {
	_, err := q.db.ExecContext(ctx, createOrUpdateGroup,
		arg.ID,
		arg.Greeting,
		arg.Questions,
		arg.BanUrl,
		arg.BanQuestion,
		arg.BanTimeout,
	)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT
  ban_question,
  ban_url,
  greeting,
  questions,
  ban_timeout
FROM public.groups
WHERE id = $1
`

type GetGroupRow struct {
	BanQuestion sql.NullBool
	BanUrl      sql.NullBool
	Greeting    sql.NullString
	Questions   queries_types.QuestionsDB
	BanTimeout  sql.NullInt32
}

func (q *Queries) GetGroup(ctx context.Context, id int64) (GetGroupRow, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i GetGroupRow
	err := row.Scan(
		&i.BanQuestion,
		&i.BanUrl,
		&i.Greeting,
		&i.Questions,
		&i.BanTimeout,
	)
	return i, err
}
