openapi: 3.0.0

info:
  title: Irma bot frontend API
  description: API
  version: '1.0.0'
  contact:
    name: Andrey Kuzmin

servers:
  - url: https://irma-bot.tk/api/v1

tags:
  - name: info
  - name: group
  - name: auth

paths:
  /healthcheck:
    get:
      description: Healthcheck
      operationId: Healthcheck
      tags: ['info']
      responses:
        '200':
          $ref: '#/components/responses/HealthcheckResponse'

  /group:
    get:
      description: Get group
      operationId: GetGroup
      tags: ['group']
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          $ref: '#/components/responses/GetGroupResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'

    post:
      description: Save group
      operationId: SaveGroup
      tags: ['group']
      parameters:
        - $ref: '#/components/parameters/Token'
      requestBody:
        $ref: '#/components/requestBodies/SaveGroupRequest'
      responses:
        '200':
          $ref: '#/components/responses/SaveGroupResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'

  /token:
    get:
      description: Get token data
      operationId: GetTokenData
      tags: ['auth']
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          $ref: '#/components/responses/GetTokenResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '500':
          $ref: '#/components/responses/InternalErrorResponse'

components:
  schemas:
    Healthcheck:
      type: object

    Group:
      type: object
      required:
        - id
        - greeting
        - ban_question
        - ban_url
        - ban_timeout
        - questions
      properties:
        id:
          type: integer
          format: int64
        greeting:
          type: string
          minLength: 1
          maxLength: 1000
        ban_question:
          type: boolean
        ban_url:
          type: boolean
        ban_timeout:
          type: integer
          format: int32
          minimum: 1
          maximum: 60
        questions:
          $ref: '#/components/schemas/Questions'
        ignore_domains:
          $ref: '#/components/schemas/Domains'

    Domains:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/Domain'

    Domain:
      type: string
      maxLength: 256

    Questions:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/Question'

    Question:
      type: object
      required:
        - text
        - answers
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 1000
        answers:
          $ref: '#/components/schemas/Answers'

    Answers:
      type: array
      minItems: 1
      maxItems: 10
      items:
        $ref: '#/components/schemas/Answer'

    Answer:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 100
        correct:
          type: boolean

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    TokenData:
      type: object
      required:
        - ttl
      properties:
        ttl:
          type: string
          format: date-fime

  responses:
    HealthcheckResponse:
      description: HealthcheckResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Healthcheck'

    GetGroupResponse:
      description: GetGroupResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'

    NotFoundErrorResponse:
      description: NotFoundErrorResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalErrorResponse:
      description: InternalErrorResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    GetTokenResponse:
      description: GetTokenResponse
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenData'

    SaveGroupResponse:
      description: SaveGroupResponse
      content:
        application/json:
          schema:
            type: object

  parameters:
    Token:
      name: token
      in: query
      required: true
      schema:
        type: string

  requestBodies:
    SaveGroupRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
