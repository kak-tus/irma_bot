// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Answer defines model for Answer.
type Answer struct {
	Correct *bool  `json:"correct,omitempty"`
	Text    string `json:"text"`
}

// Answers defines model for Answers.
type Answers []Answer

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Group defines model for Group.
type Group struct {
	BanQuestion bool      `json:"ban_question"`
	BanTimeout  int32     `json:"ban_timeout"`
	BanUrl      bool      `json:"ban_url"`
	Greeting    string    `json:"greeting"`
	Id          int64     `json:"id"`
	Questions   Questions `json:"questions"`
}

// Healthcheck defines model for Healthcheck.
type Healthcheck map[string]interface{}

// Question defines model for Question.
type Question struct {
	Answers Answers `json:"answers"`
	Text    string  `json:"text"`
}

// Questions defines model for Questions.
type Questions []Question

// GroupID defines model for GroupID.
type GroupID int64

// GetGroupResponse defines model for GetGroupResponse.
type GetGroupResponse Group

// HealthcheckResponse defines model for HealthcheckResponse.
type HealthcheckResponse Healthcheck

// InternalErrorResponse defines model for InternalErrorResponse.
type InternalErrorResponse Error

// NotFoundErrorResponse defines model for NotFoundErrorResponse.
type NotFoundErrorResponse Error

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get group
	// (GET /group/{id})
	GetGroup(w http.ResponseWriter, r *http.Request, id GroupID)
	// Healthcheck
	// (GET /healthcheck)
	Healthcheck(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetGroup operation middleware
func (siw *ServerInterfaceWrapper) GetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id GroupID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroup(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Healthcheck operation middleware
func (siw *ServerInterfaceWrapper) Healthcheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Healthcheck(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/group/{id}", wrapper.GetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/healthcheck", wrapper.Healthcheck)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVTW/bPAz+KwHf96hV6cd28K3AvnIZ1l2LYlBsxlEbSypFdysK/fdBkmM7iYdkQ3fT",
	"B8WHfPiIfIHSNs4aNOyheAGnSDXISGn3iWzrFu/jUhsowClegwCjGoQCdAUCCB9bTVhBwdSiAF+usVHx",
	"xcpSozjaGX53BQL42WHeYo0EIYT43DtrPGY45IT4rTuMZ6U1jIbjUjm30aVibY2899bEswHuf8IVFPCf",
	"HBKS+dbL5DUCBgGfUW14Xa6xfHh1nJHvDm1hGMmozQciS6+Ol7x2SF8sf7Stqf41UtjWOJXs2vgfSEk5",
	"ZB0S61zK0hJhmUC7si+t3aAyEAQw/hzfeCZtashy2KrpNlvd9bKxy/voMIgOM8FoxsYfi72LMfSuFJF6",
	"jvuc1UHwDXqvajwe4tZwKsqsuQPfS2W+P7boYw2m2YkWrBu0Le9/o8uLiW+UX7S0mXZXEyLH4A+zEfEL",
	"n/JTBWxDPkr2TW+4T1ZqF300YpeJIYldAsbIUyyPf9yQ4HB/M6J6txBqUNFx8fg/lK3o3U8FfTMm8yQJ",
	"92kciDjCa7Oy0UOFviTtcr5w/XURS6l5E80X1KjZ0vJsRakfVLN8/4Tks/352fxsHgGsQ6OchgIu05FI",
	"fT/FKOuoavmiqxC3NSZCIq2pqSwqKPount4N0+R2OsPBRG6nTbjbmwsX8/nvCOrt5MHwCAKu5lfHH043",
	"ziDg7Smw0w0+dcm2aRQ9Z0ZmdTeCBMj1rmYnSRzr+m/YmJpyu0HtzSoBHulpW6nUTWDN7HwhpaZGvVla",
	"PuMHqZyWT+cQ7sKvAAAA//8MOxXlOwgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
