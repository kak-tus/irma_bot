// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Answer defines model for Answer.
type Answer struct {
	Correct *bool  `json:"correct,omitempty"`
	Text    string `json:"text"`
}

// Answers defines model for Answers.
type Answers = []Answer

// Domain defines model for Domain.
type Domain = string

// Domains defines model for Domains.
type Domains = []Domain

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Group defines model for Group.
type Group struct {
	BanQuestion   bool      `json:"ban_question"`
	BanTimeout    int32     `json:"ban_timeout"`
	BanUrl        bool      `json:"ban_url"`
	Greeting      string    `json:"greeting"`
	Id            int64     `json:"id"`
	IgnoreDomains *Domains  `json:"ignore_domains,omitempty"`
	Questions     Questions `json:"questions"`
}

// Healthcheck defines model for Healthcheck.
type Healthcheck = map[string]interface{}

// Question defines model for Question.
type Question struct {
	Answers Answers `json:"answers"`
	Text    string  `json:"text"`
}

// Questions defines model for Questions.
type Questions = []Question

// TokenData defines model for TokenData.
type TokenData struct {
	Ttl string `json:"ttl"`
}

// Token defines model for Token.
type Token = string

// GetGroupResponse defines model for GetGroupResponse.
type GetGroupResponse = Group

// GetTokenResponse defines model for GetTokenResponse.
type GetTokenResponse = TokenData

// HealthcheckResponse defines model for HealthcheckResponse.
type HealthcheckResponse = Healthcheck

// InternalErrorResponse defines model for InternalErrorResponse.
type InternalErrorResponse = Error

// NotFoundErrorResponse defines model for NotFoundErrorResponse.
type NotFoundErrorResponse = Error

// SaveGroupResponse defines model for SaveGroupResponse.
type SaveGroupResponse = map[string]interface{}

// SaveGroupRequest defines model for SaveGroupRequest.
type SaveGroupRequest = Group

// GetGroupParams defines parameters for GetGroup.
type GetGroupParams struct {
	Token Token `form:"token" json:"token"`
}

// SaveGroupParams defines parameters for SaveGroup.
type SaveGroupParams struct {
	Token Token `form:"token" json:"token"`
}

// GetTokenDataParams defines parameters for GetTokenData.
type GetTokenDataParams struct {
	Token Token `form:"token" json:"token"`
}

// SaveGroupJSONRequestBody defines body for SaveGroup for application/json ContentType.
type SaveGroupJSONRequestBody = SaveGroupRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /group)
	GetGroup(w http.ResponseWriter, r *http.Request, params GetGroupParams)

	// (POST /group)
	SaveGroup(w http.ResponseWriter, r *http.Request, params SaveGroupParams)

	// (GET /healthcheck)
	Healthcheck(w http.ResponseWriter, r *http.Request)

	// (GET /token)
	GetTokenData(w http.ResponseWriter, r *http.Request, params GetTokenDataParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetGroup operation middleware
func (siw *ServerInterfaceWrapper) GetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupParams

	// ------------- Required query parameter "token" -------------
	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroup(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SaveGroup operation middleware
func (siw *ServerInterfaceWrapper) SaveGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SaveGroupParams

	// ------------- Required query parameter "token" -------------
	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SaveGroup(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Healthcheck operation middleware
func (siw *ServerInterfaceWrapper) Healthcheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Healthcheck(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTokenData operation middleware
func (siw *ServerInterfaceWrapper) GetTokenData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTokenDataParams

	// ------------- Required query parameter "token" -------------
	if paramValue := r.URL.Query().Get("token"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "token"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", r.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTokenData(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/group", wrapper.GetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/group", wrapper.SaveGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/healthcheck", wrapper.Healthcheck)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token", wrapper.GetTokenData)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW8bNxD9K8K0R8YrO44Pe3ORNhVaFHXbW2AE1O5oxVgkN+SsGjXgfy9I7qeWghzX",
	"DXzTksOZN284j6MvUGhZa4WKLORfoOaGSyQ04esv/YDK/xAKcvjUoDkAA8UlQg4UNhkY/NQIgyXkZBpk",
	"YIstSu5P0aH2hpaMUBU456IxWvpBlwJDiD/5Ht8Z3dR/xB2/VmhFqMJPXtc7UXASWmUfrQ5ghgDfG9xA",
	"Dt9lQxJZ3LVZcDoEHRDGFVtrZSOEd0gtgrj4f0Ao0RZG1N4J5POIjvm1QPezowhe33LiJ5BMozoGPyPf",
	"0bbYYvHw7GBGvlNwUqEdg5UiNIrvfjRGm2fHFLym0KTDOga/afpJN6r8xnjSYR0bN9ETsLRtqtcfsaBU",
	"3Ll7b9PC9R5ulf0bTdAPo2s01DZ3oY3xPocga613yJUHTfg57Ej++VdUFW0hv1wuGUih+m8205BxN7+P",
	"Pu7ZcQqsRRRACEJpz3HeZuCYh7OKJy4jmO6rj8KN4Qdv+lZLLtRRDldvbmaoO9PH42ldH+E5ByjenFkZ",
	"JFrLK0xJ8pTOzjDFaBSzme81Vx+CcIt4reZ19hYkJOomlHujjeQEOQhFr68gJChkIyG/ienFjyE7oQir",
	"WBvvqjG7dJzKIJLPananzl0qBqI8hnZzDSkEolLa4IdyKOf5Klp/sOPo7Jm73vC4OqKEUZZsSv1AzpTx",
	"ceRUWceCPNcCBnej2k4rz4cWO99Z9nTHP6XlWR89ldPdmOtHtVuf5Vc23PC2zugh2k3uVMkJX22ERDib",
	"Ie0SaXkroTa6k3YedbUdxm5VafCw+KX5R0bZmCr47e8rH1bQzhuvjOSLtabFxoQ3olzE/T0aG+0vL5YX",
	"S+9G16h4LSCH12GJQc1pGxLMqk4RKgxQZpPFIloELya8PqtyNP0EZ8O4+T5dosEkTjLg7o/mt6vl8lR9",
	"e7ssNXJdL6/PHzz56L55TNgTI4RvBl75pCFydO8Y1NomePSP7wki+3f5PzHZDeSH09mMZvZsNrC7p5Qj",
	"MVK8sHo4Btl2Ko7Jez4W0OMCTfe+nqXkODzCGvQgQqXur9rJZgwWi9KLVaIjByX7xl05+/vxIm4Bb2jr",
	"mfVzLpp9R0UYPmBLVNs8y4SR/NVa0wU9ZLwW2f4y0ND66LU5VMmx/jvesNFCCObu3b8BAAD//94MlR+N",
	"DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
